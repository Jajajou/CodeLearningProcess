const int BASE = 1e9;
typedef vector<int> big;

big toBig(int x)
{
    assert(x < BASE);
    return big(1, x);
}

void fix(big &a)
{
    a.pb(0);
    forup(int, i, 0, (int)a.size() - 1)
    {
        a[i + 1] += a[i] / BASE;
        a[i] %= BASE;
        if (a[i] < 0)
        {
            a[i] += BASE;
            --a[i + 1];
        }
    }
    while ((int)a.size() > 1 && a.back() == 0)
        a.pop_back();
}

big operator*(const big &a, const big &b)
{
    big c((int)a.size() + (int)b.size() + 1);
    forup(int, i, 0, (int)a.size() - 1) forup(int, j, 0, (int)b.size() - 1)
    {
        c[i + j] = a[i] * b[j];
        c[i + j + 1] += c[i + j] / BASE;
        c[i + j] %= BASE;
    }
    return fix(c), c;
}

big operator*(big a, const int &b)
{
    assert(b < BASE);
    forup(int, i, 0, (int)a.size() - 1) a[i] *= b;
    return fix(a), a;
}

big operator+(big a, const big &b)
{
    a.resize(max((int)a.size(), (int)b.size()));
    forup(int, i, 0, (int)b.size() - 1) a[i] += b[i];
    return fix(a), a;
}

big operator-(big a, const big &b)
{
    forup(int, i, 0, (int)b.size() - 1) a[i] -= b[i];
    return fix(a), a;
}

bool operator<(const big &a, const big &b)
{
    if ((int)a.size() != (int)b.size())
        return (int)a.size() < (int)b.size();
    fordown(int, i, (int)a.size() - 1, 0) if (a[i] != b[i]) return a[i] < b[i];
    return 0;
}

big operator/(big a, int x)
{
    assert(x < BASE);
    for (int i = (int)a.size() - 1, r = 0; i >= 0; --i, r %= x)
    {
        r = r * BASE + a[i];
        a[i] = r / x;
    }
    return fix(a), a;
}

int operator%(const big &a, int x)
{
    int r = 0;
    for (int i = (int)a.size() - 1; i >= 0; --i)
        r = (r * BASE + a[i]) % x;
    return r;
}

istream &operator>>(istream &cin, big &a)
{
    string s;
    cin >> s;
    while (s.size() % 9)
        s = '0' + s;
    for (int i = 0; i < (int)s.size(); i += 9)
    {
        ll b = 0;
        forup(int, j, i, i + 9 - 1) b = b * 10 + (s[j] - '0');
        a.insert(a.begin(), b);
    }
    return fix(a), cin;
}

ostream &operator<<(ostream &cout, const big &a)
{
    printf("%d", a.back());
    for (int i = (int)a.size() - 2; i >= 0; i--)
        printf("%09d", a[i]);
    return cout;
}