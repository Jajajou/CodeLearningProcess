struct Point
{
    long long x, y;
    bool operator<(const Point &v) const { return x == v.x ? y < v.y : x < v.x; }
    long long cross(const Point &p, const Point &q) const { return (p.x - x) * (q.y - y) - (p.y - y) * (q.x - x); }
} p[maxn], poly[maxn];
istream &operator>>(istream &cin, Point &p)
{
    ll a, b;
    cin >> a >> b;
    return p = {a, b}, cin;
}
ostream &operator<<(ostream &cout, Point p) { return cout << p.x << ' ' << p.y, cout; }
int n(0);

long long size(Point poly[], int k)
{
    long long S = (poly[k - 1].x - poly[0].x) * (poly[k - 1].y + poly[0].y);
    for (int i = 1; i < k; ++i)
        S += (poly[i - 1].x - poly[i].x) * (poly[i - 1].y + poly[i].y);
    return S;
    printf("%lld\n", S);
}

void convexHull()
{
    sort(p, p + n);
    int k = 0;
    for (int i = 0; i < n; ++i)
    {
        while (k >= 2 && poly[k - 2].cross(poly[k - 1], p[i]) <= 0)
            --k;
        poly[k++] = p[i];
    }
    for (int i = n - 2, t = k + 1; i >= 0; --i)
    {
        while (k >= t && poly[k - 2].cross(poly[k - 1], p[i]) <= 0)
            --k;
        poly[k++] = p[i];
    }
}