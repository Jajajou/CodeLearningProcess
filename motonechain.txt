struct Point
{
    long long x, y;
    bool operator<(const Point &v) const { return x == v.x ? y < v.y : x < v.x; }
    Point operator+(const Point &b) const { return Point{x + b.x, y + b.y}; }
    Point operator-(const Point &b) const { return Point{x - b.x, y - b.y}; }
    ll operator*(const Point &b) const { return (ll)x * b.y - (ll)y * b.x; }
    void operator+=(const Point &b) { x += b.x, y += b.y; }
    void operator-=(const Point &b) { x -= b.x, y -= b.y; }
    void operator*=(const int k) { x *= k, y *= k; }
    ll cross(const Point &b, const Point &c) const
    {
        return (b - *this) * (c - *this);
    }
} p[maxn], poly[maxn];
istream &operator>>(istream &cin, Point &p)
{
    ll a, b;
    cin >> a >> b;
    return p = {a, b}, cin;
}
ostream &operator<<(ostream &cout, Point p) { return cout << p.x << ' ' << p.y, cout; }
int fix(ll x) { return (x>0) ? 1 : (x == 0 ? 0 : -1); }
int n(0);

long long size(Point poly[], int k)
{
    long long S = (poly[k - 1].x - poly[0].x) * (poly[k - 1].y + poly[0].y);
    for (int i = 1; i < k; ++i)
        S += (poly[i - 1].x - poly[i].x) * (poly[i - 1].y + poly[i].y);
    return abs(S);
    printf("%lld\n", S);
}

void convexHull()
{
    sort(p, p + n);
    int k = 0;
    for (int i = 0; i < n; ++i)
    {
        while (k >= 2 && poly[k - 1].cross(poly[k - 2], p[i]) <= 0)
            --k;
        poly[k++] = p[i];
    }
    for (int i = n - 2, t = k + 1; i >= 0; --i)
    {
        while (k >= t && poly[k - 1].cross(poly[k - 2], p[i]) <= 0)
            --k;
        poly[k++] = p[i];
    }
}